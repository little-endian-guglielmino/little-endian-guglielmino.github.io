{"version":3,"sources":["webpack:///./src/templates/index-page.js","webpack:///./src/components/BlogRoll.js"],"names":["IndexPageTemplate","image","heading","title","mainpitch","description","intro","className","style","backgroundImage","childImageSharp","fluid","src","backgroundPosition","backgroundAttachment","display","height","lineHeight","justifyContent","alignItems","flexDirection","gridItems","blurbs","to","IndexPage","frontmatter","data","markdownRemark","pageQuery","BlogRoll","render","posts","this","props","allMarkdownRemark","edges","map","post","node","key","id","fields","slug","date","excerpt","React","Component","query","count"],"mappings":"qiEAAA,4KAQaA,EAAoB,SAAC,GAAD,IAC/BC,EAD+B,EAC/BA,MAEAC,GAH+B,EAE/BC,MAF+B,EAG/BD,SACAE,EAJ+B,EAI/BA,UACAC,EAL+B,EAK/BA,YACAC,EAN+B,EAM/BA,MAN+B,OAQ/B,6BACE,yBACEC,UAAU,gCACVC,MAAO,CACLC,gBAAgB,QACZR,EAAMS,gBAAkBT,EAAMS,gBAAgBC,MAAMC,IAAMX,GAD/C,IAGfY,mBAAmB,WACnBC,qBAAqB,UAGvB,yBACEN,MAAO,CACLO,QAAS,OACTC,OAAQ,QACRC,WAAY,IACZC,eAAgB,eAChBC,WAAY,OACZC,cAAe,aAMrB,6BAASb,UAAU,6BACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,SAASH,EAAUD,QAEnC,yBAAKI,UAAU,QACb,wBAAIA,UAAU,YAAYH,EAAUC,eAGxC,yBAAKE,UAAU,WACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,sCACXL,GAEH,2BAAIG,KAGR,kBAAC,IAAD,CAAUgB,UAAWf,EAAMgB,SAC3B,yBAAKf,UAAU,WACb,yBAAKA,UAAU,kCACb,kBAAC,IAAD,CAAMA,UAAU,MAAMgB,GAAG,aAAzB,sBAKJ,yBAAKhB,UAAU,gBACb,wBAAIA,UAAU,sCAAd,mBAGA,kBAAC,IAAD,eAgDHiB,UAzBG,SAAC,GAAc,IACvBC,EADsB,EAAXC,KACUC,eAArBF,YAER,OACE,kBAAC,IAAD,KACE,kBAACzB,EAAD,CACEC,MAAOwB,EAAYxB,MACnBE,MAAOsB,EAAYtB,MACnBD,QAASuB,EAAYvB,QACrBE,UAAWqB,EAAYrB,UACvBC,YAAaoB,EAAYpB,YACzBC,MAAOmB,EAAYnB,UAgBpB,IAAMsB,EAAS,c,yFCxHhBC,E,gLACJC,OAAA,WAAU,IAEOC,EADEC,KAAKC,MAAdP,KACsBQ,kBAAtBC,MAER,OACE,yBAAK5B,UAAU,wBACZwB,GACCA,EAAMK,KAAI,gBAASC,EAAT,EAAGC,KAAH,OACR,yBAAK/B,UAAU,wBAAwBgC,IAAKF,EAAKG,IAC/C,6BAASjC,UAAU,kCACjB,2BACE,kBAAC,IAAD,CACEA,UAAU,mCACVgB,GAAIc,EAAKI,OAAOC,MAEfL,EAAKZ,YAAYtB,OAEpB,qCACA,0BAAMI,UAAU,+BACb8B,EAAKZ,YAAYkB,OAGtB,2BACGN,EAAKO,QACN,6BACA,6BACA,kBAAC,IAAD,CAAMrC,UAAU,SAASgB,GAAIc,EAAKI,OAAOC,MAAzC,0B,GA3BKG,IAAMC,WA+Cd,sBACb,kBAAC,IAAD,CACEC,MAAK,aAuBLjB,OAAQ,SAACJ,EAAMsB,GAAP,OAAiB,kBAACnB,EAAD,CAAUH,KAAMA,EAAMsB,MAAOA,KAxBxD","file":"component---src-templates-index-page-js-6557c5350094fc9c3665.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport Features from '../components/Features'\nimport BlogRoll from '../components/BlogRoll'\n\nexport const IndexPageTemplate = ({\n  image,\n  title,\n  heading,\n  mainpitch,\n  description,\n  intro,\n}) => (\n  <div>\n    <div\n      className=\"full-width-image margin-top-0\"\n      style={{\n        backgroundImage: `url(${\n          !!image.childImageSharp ? image.childImageSharp.fluid.src : image\n        })`,\n        backgroundPosition: `top left`,\n        backgroundAttachment: `fixed`,\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          height: '150px',\n          lineHeight: '1',\n          justifyContent: 'space-around',\n          alignItems: 'left',\n          flexDirection: 'column',\n        }}\n      >\n\n      </div>\n    </div>\n    <section className=\"section section--gradient\">\n      <div className=\"container\">\n        <div className=\"section\">\n          <div className=\"columns\">\n            <div className=\"column is-10 is-offset-1\">\n              <div className=\"content\">\n                <div className=\"content\">\n                  <div className=\"tile\">\n                    <h1 className=\"title\">{mainpitch.title}</h1>\n                  </div>\n                  <div className=\"tile\">\n                    <h3 className=\"subtitle\">{mainpitch.description}</h3>\n                  </div>\n                </div>\n                <div className=\"columns\">\n                  <div className=\"column is-12\">\n                    <h3 className=\"has-text-weight-semibold is-size-2\">\n                      {heading}\n                    </h3>\n                    <p>{description}</p>\n                  </div>\n                </div>\n                <Features gridItems={intro.blurbs} />\n                <div className=\"columns\">\n                  <div className=\"column is-12 has-text-centered\">\n                    <Link className=\"btn\" to=\"/projects\">\n                      See our projects\n                    </Link>\n                  </div>\n                </div>\n                <div className=\"column is-12\">\n                  <h3 className=\"has-text-weight-semibold is-size-2\">\n                    Latest projects\n                  </h3>\n                  <BlogRoll />\n                  \n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  </div>\n)\n\nIndexPageTemplate.propTypes = {\n  image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  title: PropTypes.string,\n  heading: PropTypes.string,\n  mainpitch: PropTypes.object,\n  description: PropTypes.string,\n  intro: PropTypes.shape({\n    blurbs: PropTypes.array,\n  }),\n}\n\nconst IndexPage = ({ data }) => {\n  const { frontmatter } = data.markdownRemark\n\n  return (\n    <Layout>\n      <IndexPageTemplate\n        image={frontmatter.image}\n        title={frontmatter.title}\n        heading={frontmatter.heading}\n        mainpitch={frontmatter.mainpitch}\n        description={frontmatter.description}\n        intro={frontmatter.intro}\n      />\n    </Layout>\n  )\n}\n\nIndexPage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.object,\n    }),\n  }),\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  query IndexPageTemplate {\n    markdownRemark(frontmatter: { templateKey: { eq: \"index-page\" } }) {\n      frontmatter {\n        title\n        image {\n          childImageSharp {\n            fluid(maxWidth: 2048, quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        heading\n        mainpitch {\n          title\n          description\n        }\n        description\n        intro {\n          blurbs {\n            image {\n              childImageSharp {\n                fluid(maxWidth: 240, quality: 64) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            text\n          }\n          heading\n          description\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql, StaticQuery } from 'gatsby'\n\nclass BlogRoll extends React.Component {\n  render() {\n    const { data } = this.props\n    const { edges: posts } = data.allMarkdownRemark\n\n    return (\n      <div className=\"columns is-multiline\">\n        {posts &&\n          posts.map(({ node: post }) => (\n            <div className=\"is-parent column is-6\" key={post.id}>\n              <article className=\"tile is-child box notification\">\n                <p>\n                  <Link\n                    className=\"title has-text-primary is-size-4\"\n                    to={post.fields.slug}\n                  >\n                    {post.frontmatter.title}\n                  </Link>\n                  <span> &bull; </span>\n                  <span className=\"subtitle is-size-5 is-block\">\n                    {post.frontmatter.date}\n                  </span>\n                </p>\n                <p>\n                  {post.excerpt}\n                  <br />\n                  <br />\n                  <Link className=\"button\" to={post.fields.slug}>\n                    Keep Reading â†’\n                  </Link>\n                </p>\n              </article>\n            </div>\n          ))}\n      </div>\n    )\n  }\n}\n\nBlogRoll.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.array,\n    }),\n  }),\n}\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      query BlogRollQuery {\n        allMarkdownRemark(\n          sort: { order: DESC, fields: [frontmatter___date] }\n          filter: { frontmatter: { templateKey: { eq: \"project\" } } }\n        ) {\n          edges {\n            node {\n              excerpt(pruneLength: 400)\n              id\n              fields {\n                slug\n              }\n              frontmatter {\n                title\n                templateKey\n                date(formatString: \"MMMM DD, YYYY\")\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={(data, count) => <BlogRoll data={data} count={count} />}\n  />\n)\n"],"sourceRoot":""}